Thought.
Specification.

// Pantagruel is a language for writing *system specifications*.

pantagruel thoughts: [Thought] => Specification.
---



;

// It's a computer language, but not as you might think of it.

// The effects of evaluating a specification are *null*---Pantagruel has no execution semantics.

eval spec: Specification.
check spec: Specification => Bool.
---

// However, Pantagruel specifications can be checked to ensure that certain conditions have been met.

// For instance, that you've defined all your terms by the end of your document.
(check spec) -> (
	all s <: invoked_symbols doc,
	    location: Location,
	    location = first_appearance s doc ...
		case section_of location doc ...
			"head" => bound_as_of? s (chapter_of location),
			"body" => bound_as_of? s (chapter_after location)
).

;

(Head, Body) = [String].
Chapter = (Head, Body).
Document = [Chapter].

Section = {"head", "body"}.
Location = (Chapter, Section).

// This allows a structured form of description where terms can be explained in gradually greater detail.

section_of location: Location, doc: Document => Section.

//

invoked_symbols doc: Document => {String}.
first_appearance symbol: String, doc: Document => Location.

//

bound_as_of? symbol: String, chapter: Chapter => Bool.

chapter_of location: Location => Chapter.
chapter_after location: Location => Chapter.
---

invoked_symbols doc =
	[all c <: doc, head_s <: c 0 ... head_s] +
	[all c <: doc, body_s <: c 1 ... body_s].

;

Statement.

// Specifications can also be type-checked to ensure that your logic is consistent.
type_checks? expr: Statement => Bool.
---

(check spec) -> (all statement <: (statements doc) ... type_checks? statement).

;

statements doc: Document => [Statement].
---
